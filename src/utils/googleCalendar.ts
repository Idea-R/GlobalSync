import { CollaborationWindow } from '../types';

interface CalendarEventData {
  title: string;
  startDate: Date;
  endDate: Date;
  description?: string;
  location?: string;
  timezone?: string;
}

/**
 * Generates a Google Calendar invite URL
 */
export const generateGoogleCalendarUrl = (eventData: CalendarEventData): string => {
  const baseUrl = 'https://calendar.google.com/calendar/render';
  
  // Format dates to YYYYMMDDTHHMMSSZ (UTC format)
  const formatDate = (date: Date): string => {
    return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
  };
  
  const params = new URLSearchParams({
    action: 'TEMPLATE',
    text: eventData.title,
    dates: `${formatDate(eventData.startDate)}/${formatDate(eventData.endDate)}`,
  });
  
  if (eventData.description) {
    params.append('details', eventData.description);
  }
  
  if (eventData.location) {
    params.append('location', eventData.location);
  }
  
  if (eventData.timezone) {
    params.append('ctz', eventData.timezone);
  }
  
  return `${baseUrl}?${params.toString()}`;
};

/**
 * Generates a Google Calendar invite URL for a collaboration window
 */
export const generateCollaborationCalendarUrl = (
  window: CollaborationWindow,
  date: Date = new Date(),
  title?: string
): string => {
  // Create start and end dates for the collaboration window
  const startDate = new Date(date);
  startDate.setUTCHours(window.startHour, 0, 0, 0);
  
  const endDate = new Date(date);
  endDate.setUTCHours(window.endHour, 0, 0, 0);
  
  // Handle case where end hour is next day (e.g., 23-1)
  if (window.endHour <= window.startHour) {
    endDate.setUTCDate(endDate.getUTCDate() + 1);
  }
  
  const eventTitle = title || `Team Collaboration Session - ${window.period.replace('-', ' ')}`;
  
  const description = [
    `🚀 GlobalSync Team Collaboration Window`,
    ``,
    `📅 Time: ${formatCollaborationTime(window)} UTC`,
    `👥 Available Team Members: ${window.availableMembers.join(', ')}`,
    `⏰ Period: ${window.period.replace('-', ' ')}`,
    ``,
    `This is an optimal time window when all listed team members are available for collaboration.`,
    ``,
    `Generated by GlobalSync - AI Developer Command Center 🌍`
  ].join('\n');
  
  return generateGoogleCalendarUrl({
    title: eventTitle,
    startDate,
    endDate,
    description,
    location: 'Virtual Meeting (details TBD)',
    timezone: 'UTC'
  });
};

/**
 * Helper function to format collaboration time
 */
const formatCollaborationTime = (window: CollaborationWindow): string => {
  const formatHour = (hour: number) => {
    if (hour === 0) return '12 AM';
    if (hour < 12) return `${hour} AM`;
    if (hour === 12) return '12 PM';
    return `${hour - 12} PM`;
  };
  
  return `${formatHour(window.startHour)} - ${formatHour(window.endHour)}`;
};

/**
 * Generates multiple calendar URLs for different services
 */
export const generateMultipleCalendarUrls = (
  window: CollaborationWindow,
  date: Date = new Date(),
  title?: string
) => {
  const googleUrl = generateCollaborationCalendarUrl(window, date, title);
  
  // For now, we'll focus on Google Calendar, but this can be extended
  // to support Outlook, Yahoo, etc.
  return {
    google: googleUrl,
    // outlook: generateOutlookUrl(...),
    // yahoo: generateYahooUrl(...),
  };
}; 